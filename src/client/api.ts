/* tslint:disable */
/* eslint-disable */
/**
 * Sometimes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface FriendInfo
 */
export interface FriendInfo {
  /**
   *
   * @type {string}
   * @memberof FriendInfo
   */
  uuid?: string | null
  /**
   *
   * @type {string}
   * @memberof FriendInfo
   */
  firstName?: string | null
  /**
   *
   * @type {string}
   * @memberof FriendInfo
   */
  lastName?: string | null
  /**
   *
   * @type {string}
   * @memberof FriendInfo
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof FriendInfo
   */
  profilePicUrl?: string | null
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
  [key: string]: any

  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  type?: string | null
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  title?: string | null
  /**
   *
   * @type {number}
   * @memberof ProblemDetails
   */
  status?: number | null
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  detail?: string | null
  /**
   *
   * @type {string}
   * @memberof ProblemDetails
   */
  instance?: string | null
}
/**
 *
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  uuid?: string | null
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  firstName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  lastName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  userName?: string | null
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  email?: string | null
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  profilePicUrl?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof UserInfo
   */
  friends?: Array<string> | null
}

/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export const UserInfoApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoAddFriendPost: async (
      uuid?: string,
      friendUuid?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/UserInfo/AddFriend`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (uuid != null) {
        localVarHeaderParameter['uuid'] = String(uuid)
      }

      if (friendUuid != null) {
        localVarHeaderParameter['friendUuid'] = String(friendUuid)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoFriendsGet: async (
      uuid?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/UserInfo/Friends`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (uuid != null) {
        localVarHeaderParameter['uuid'] = String(uuid)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoGet: async (
      uuid?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/UserInfo`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (uuid != null) {
        localVarHeaderParameter['uuid'] = String(uuid)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserInfo} [userInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoPost: async (
      userInfo?: UserInfo,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/UserInfo`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userInfo,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoRemoveFriendPost: async (
      uuid?: string,
      friendUuid?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/UserInfo/RemoveFriend`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (uuid != null) {
        localVarHeaderParameter['uuid'] = String(uuid)
      }

      if (friendUuid != null) {
        localVarHeaderParameter['friendUuid'] = String(friendUuid)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserInfoApi - functional programming interface
 * @export
 */
export const UserInfoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserInfoApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInfoAddFriendPost(
      uuid?: string,
      friendUuid?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userInfoAddFriendPost(
          uuid,
          friendUuid,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInfoFriendsGet(
      uuid?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<FriendInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userInfoFriendsGet(uuid, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInfoGet(
      uuid?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInfoGet(
        uuid,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {UserInfo} [userInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInfoPost(
      userInfo?: UserInfo,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInfoPost(
        userInfo,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInfoRemoveFriendPost(
      uuid?: string,
      friendUuid?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userInfoRemoveFriendPost(
          uuid,
          friendUuid,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * UserInfoApi - factory interface
 * @export
 */
export const UserInfoApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserInfoApiFp(configuration)
  return {
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoAddFriendPost(
      uuid?: string,
      friendUuid?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .userInfoAddFriendPost(uuid, friendUuid, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoFriendsGet(
      uuid?: string,
      options?: any
    ): AxiosPromise<Array<FriendInfo>> {
      return localVarFp
        .userInfoFriendsGet(uuid, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [uuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoGet(uuid?: string, options?: any): AxiosPromise<UserInfo> {
      return localVarFp
        .userInfoGet(uuid, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserInfo} [userInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoPost(userInfo?: UserInfo, options?: any): AxiosPromise<UserInfo> {
      return localVarFp
        .userInfoPost(userInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [uuid]
     * @param {string} [friendUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInfoRemoveFriendPost(
      uuid?: string,
      friendUuid?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .userInfoRemoveFriendPost(uuid, friendUuid, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export class UserInfoApi extends BaseAPI {
  /**
   *
   * @param {string} [uuid]
   * @param {string} [friendUuid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInfoApi
   */
  public userInfoAddFriendPost(
    uuid?: string,
    friendUuid?: string,
    options?: AxiosRequestConfig
  ) {
    return UserInfoApiFp(this.configuration)
      .userInfoAddFriendPost(uuid, friendUuid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [uuid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInfoApi
   */
  public userInfoFriendsGet(uuid?: string, options?: AxiosRequestConfig) {
    return UserInfoApiFp(this.configuration)
      .userInfoFriendsGet(uuid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [uuid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInfoApi
   */
  public userInfoGet(uuid?: string, options?: AxiosRequestConfig) {
    return UserInfoApiFp(this.configuration)
      .userInfoGet(uuid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserInfo} [userInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInfoApi
   */
  public userInfoPost(userInfo?: UserInfo, options?: AxiosRequestConfig) {
    return UserInfoApiFp(this.configuration)
      .userInfoPost(userInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [uuid]
   * @param {string} [friendUuid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInfoApi
   */
  public userInfoRemoveFriendPost(
    uuid?: string,
    friendUuid?: string,
    options?: AxiosRequestConfig
  ) {
    return UserInfoApiFp(this.configuration)
      .userInfoRemoveFriendPost(uuid, friendUuid, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
